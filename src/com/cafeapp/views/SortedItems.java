package com.cafeapp.views;

import com.cafeapp.controller.algorithms.BinarySearch;
import com.cafeapp.controller.algorithms.InsertionSort;
import com.cafeapp.controller.algorithms.MergeSort;
import com.cafeapp.controller.algorithms.SelectionSort;
import com.cafeapp.model.MenuItems;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Pranav Sharma LMU ID: 23048577 This class represents a user interface
 * for displaying a sorted list of menu items and performing sorting and
 * searching operations on the list. It contains functionality to sort menu
 * items by different criteria like ID, name, price, or calories, and supports
 * both ascending and descending orders. Additionally, it includes a search
 * feature for finding items based on their name. The class interacts with
 * various sorting algorithms such as MergeSort, SelectionSort, and
 * InsertionSort. It also uses BinarySearch for searching menu items by name.
 */
public class SortedItems extends javax.swing.JFrame {

    private boolean isAscending = true;
    private LinkedList<MenuItems> menuList;
    private LinkedList<MenuItems> sortedMenuList;
    private MergeSort mergeSort;
    private SelectionSort selectionSort;
    private InsertionSort insertionSort;
    private DefaultTableModel tableModel;
    private BinarySearch binarySearch;

    /**
     * Default constructor initializing components and sorting algorithms.
     */
    public SortedItems() {
        initComponents();
        menuList = new LinkedList();
        mergeSort = new MergeSort();
        selectionSort = new SelectionSort();
        insertionSort = new InsertionSort();
        binarySearch = new BinarySearch();

    }

    /**
     * Constructor that initializes the menu list, sorts the list using
     * MergeSort, and loads the sorted list into the table.
     *
     * @param menuList The initial list of menu items to be sorted and
     * displayed.
     */
    public SortedItems(LinkedList<MenuItems> menuList) {
        this();

        this.menuList = new LinkedList(menuList);

        sortedMenuList = mergeSort.sort(this.menuList, 0, true);

        loadListToTable(sortedMenuList);
    }

    /**
     * Loads a list of menu items into the JTable.
     *
     * @param menuList The list of menu items to display in the table.
     */
    private void loadListToTable(LinkedList<MenuItems> menuList) {
        DefaultTableModel model = (DefaultTableModel) tblforSortedList.getModel();
        // Clear existing rows if needed
        model.setRowCount(0);
        // Populate the table with student data
        for (MenuItems menu : menuList) {
            model.addRow(new Object[]{
                menu.getId(), menu.getName(), menu.getCategory(), menu.getPrice(),
                menu.getDescription(), menu.getCalories()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogforTableSearch = new javax.swing.JDialog();
        jScrollPaneforSortedList1 = new javax.swing.JScrollPane();
        tblforSearch = new javax.swing.JTable();
        pnlforallcomponentsofSort = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlforMenubar = new javax.swing.JPanel();
        btnforuserdashboard = new javax.swing.JButton();
        btnforadd1 = new javax.swing.JButton();
        lblforsettings = new javax.swing.JLabel();
        btnforadmindashboard = new javax.swing.JButton();
        jScrollPaneforSortedList = new javax.swing.JScrollPane();
        tblforSortedList = new javax.swing.JTable();
        jComboBoxforascendingdescending = new javax.swing.JComboBox<>();
        jComboBoxforsortbyidname = new javax.swing.JComboBox<>();
        lblforSortbytxt = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtfldforSearch = new javax.swing.JTextField();

        jDialogforTableSearch.setMinimumSize(new java.awt.Dimension(735, 439));

        tblforSearch.setBackground(new java.awt.Color(240, 232, 219));
        tblforSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38)));
        tblforSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        tblforSearch.setForeground(new java.awt.Color(145, 79, 38));
        tblforSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item Name", "Category", "Price", "Description", "Calories"
            }
        ));
        jScrollPaneforSortedList1.setViewportView(tblforSearch);

        javax.swing.GroupLayout jDialogforTableSearchLayout = new javax.swing.GroupLayout(jDialogforTableSearch.getContentPane());
        jDialogforTableSearch.getContentPane().setLayout(jDialogforTableSearchLayout);
        jDialogforTableSearchLayout.setHorizontalGroup(
            jDialogforTableSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneforSortedList1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        jDialogforTableSearchLayout.setVerticalGroup(
            jDialogforTableSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneforSortedList1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        pnlforallcomponentsofSort.setBackground(new java.awt.Color(240, 232, 219));
        pnlforallcomponentsofSort.setMinimumSize(new java.awt.Dimension(1366, 768));
        pnlforallcomponentsofSort.setPreferredSize(new java.awt.Dimension(1366, 768));

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 48)); // NOI18N
        lblTitle.setText("Sorted List of Menu Items");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38), 2));

        pnlforMenubar.setBackground(new java.awt.Color(240, 232, 219));
        pnlforMenubar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38)));

        btnforuserdashboard.setBackground(new java.awt.Color(240, 232, 219));
        btnforuserdashboard.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnforuserdashboard.setForeground(new java.awt.Color(145, 79, 38));
        btnforuserdashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/category.png"))); // NOI18N
        btnforuserdashboard.setText("USER DASHBOARD");
        btnforuserdashboard.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(145, 79, 38), 2, true));
        btnforuserdashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnforuserdashboardActionPerformed(evt);
            }
        });

        btnforadd1.setBackground(new java.awt.Color(240, 232, 219));
        btnforadd1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnforadd1.setForeground(new java.awt.Color(145, 79, 38));
        btnforadd1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new product.png"))); // NOI18N
        btnforadd1.setText("ADD ITEMS");
        btnforadd1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38), 2));
        btnforadd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnforadd1ActionPerformed(evt);
            }
        });

        lblforsettings.setBackground(new java.awt.Color(240, 232, 219));
        lblforsettings.setForeground(new java.awt.Color(240, 232, 219));
        lblforsettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/—Pngtree—settings icon_4491632.png"))); // NOI18N
        lblforsettings.setText("jLabel1");

        btnforadmindashboard.setBackground(new java.awt.Color(240, 232, 219));
        btnforadmindashboard.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnforadmindashboard.setForeground(new java.awt.Color(145, 79, 38));
        btnforadmindashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/category.png"))); // NOI18N
        btnforadmindashboard.setText("ADMIN DASHBOARD");
        btnforadmindashboard.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(145, 79, 38), 2, true));
        btnforadmindashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnforadmindashboardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlforMenubarLayout = new javax.swing.GroupLayout(pnlforMenubar);
        pnlforMenubar.setLayout(pnlforMenubarLayout);
        pnlforMenubarLayout.setHorizontalGroup(
            pnlforMenubarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlforMenubarLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(lblforsettings, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlforMenubarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlforMenubarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnforadd1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnforuserdashboard, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnforadmindashboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlforMenubarLayout.setVerticalGroup(
            pnlforMenubarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlforMenubarLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblforsettings, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnforuserdashboard)
                .addGap(40, 40, 40)
                .addComponent(btnforadd1)
                .addGap(36, 36, 36)
                .addComponent(btnforadmindashboard)
                .addContainerGap(447, Short.MAX_VALUE))
        );

        tblforSortedList.setBackground(new java.awt.Color(240, 232, 219));
        tblforSortedList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38)));
        tblforSortedList.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        tblforSortedList.setForeground(new java.awt.Color(145, 79, 38));
        tblforSortedList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item Name", "Category", "Price", "Description", "Calories"
            }
        ));
        jScrollPaneforSortedList.setViewportView(tblforSortedList);

        jComboBoxforascendingdescending.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));
        jComboBoxforascendingdescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxforascendingdescendingActionPerformed(evt);
            }
        });

        jComboBoxforsortbyidname.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Name", "Price", "Calories" }));
        jComboBoxforsortbyidname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxforsortbyidnameActionPerformed(evt);
            }
        });

        lblforSortbytxt.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        lblforSortbytxt.setText("SORT BY:");
        lblforSortbytxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38), 2));

        btnSearch.setBackground(new java.awt.Color(240, 232, 219));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        btnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38), 2));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtfldforSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        txtfldforSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(145, 79, 38), 2));

        javax.swing.GroupLayout pnlforallcomponentsofSortLayout = new javax.swing.GroupLayout(pnlforallcomponentsofSort);
        pnlforallcomponentsofSort.setLayout(pnlforallcomponentsofSortLayout);
        pnlforallcomponentsofSortLayout.setHorizontalGroup(
            pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlforallcomponentsofSortLayout.createSequentialGroup()
                .addComponent(pnlforMenubar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneforSortedList)
                    .addGroup(pnlforallcomponentsofSortLayout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblforSortbytxt)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxforascendingdescending, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxforsortbyidname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 143, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlforallcomponentsofSortLayout.createSequentialGroup()
                        .addComponent(txtfldforSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(351, 351, 351)))
                .addContainerGap())
        );
        pnlforallcomponentsofSortLayout.setVerticalGroup(
            pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlforallcomponentsofSortLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlforallcomponentsofSortLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxforascendingdescending, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxforsortbyidname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblforSortbytxt)))
                .addGap(98, 98, 98)
                .addGroup(pnlforallcomponentsofSortLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfldforSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(jScrollPaneforSortedList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pnlforMenubar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlforallcomponentsofSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlforallcomponentsofSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the action when the "User Dashboard" button is clicked. Hides the
     * current window and opens the User Dashboard window.
     *
     * @param evt The event triggered by clicking the button.
     */
    private void btnforuserdashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnforuserdashboardActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new Dashboard(menuList).setVisible(true);
    }//GEN-LAST:event_btnforuserdashboardActionPerformed

    /**
     * Handles the action when the "Add Items" button is clicked. Hides the
     * current window and opens the Add Items window.
     *
     * @param evt The event triggered by clicking the button.
     */
    private void btnforadd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnforadd1ActionPerformed
        setVisible(false);
        new Add(menuList).setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_btnforadd1ActionPerformed

    /**
     * Handles the action when the sorting order (ascending/descending) is
     * selected. Adjusts the sorting based on the selected order and criterion.
     *
     * @param evt The event triggered by selecting a sorting order.
     */
    private void jComboBoxforascendingdescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxforascendingdescendingActionPerformed
        // TODO add your handling code here:

        if (jComboBoxforascendingdescending.getSelectedIndex() == 0) {
            isAscending = true;
        } else {
            isAscending = false;
        }
        if (jComboBoxforsortbyidname.getSelectedIndex() == 0) {

            sortedMenuList = mergeSort.sort(menuList, jComboBoxforsortbyidname.getSelectedIndex(), isAscending);

        } else if (jComboBoxforsortbyidname.getSelectedIndex() == 2) {
            sortedMenuList = selectionSort.sortByPrice(menuList, isAscending);
        } else if (jComboBoxforsortbyidname.getSelectedIndex() == 3) {
            sortedMenuList = insertionSort.sortbyCalories(menuList, isAscending);
        } else {
            sortedMenuList = mergeSort.sort(menuList, jComboBoxforsortbyidname.getSelectedIndex(), isAscending);

        }
        loadListToTable(sortedMenuList);
    }//GEN-LAST:event_jComboBoxforascendingdescendingActionPerformed
    /**
     * Handles the action when a sorting criterion (ID, name, price, calories)
     * is selected. Adjusts the sorting based on the selected criterion and
     * order.
     *
     * @param evt The event triggered by selecting a sorting criterion.
     */
    private void jComboBoxforsortbyidnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxforsortbyidnameActionPerformed
        // TODO add your handling code here:

        if (jComboBoxforsortbyidname.getSelectedIndex() == 0) {

            sortedMenuList = mergeSort.sort(menuList, jComboBoxforsortbyidname.getSelectedIndex(), isAscending);

        } else if (jComboBoxforsortbyidname.getSelectedIndex() == 2) {
            sortedMenuList = selectionSort.sortByPrice(menuList, isAscending);
        } else if (jComboBoxforsortbyidname.getSelectedIndex() == 3) {
            sortedMenuList = insertionSort.sortbyCalories(menuList, isAscending);
        } else {
            sortedMenuList = mergeSort.sort(menuList, jComboBoxforsortbyidname.getSelectedIndex(), isAscending);

        }
        loadListToTable(sortedMenuList);


    }//GEN-LAST:event_jComboBoxforsortbyidnameActionPerformed

    /**
     * Handles the action when the "Admin Dashboard" button is clicked. Hides
     * the current window and opens the Admin Dashboard window.
     *
     * @param evt The event triggered by clicking the button.
     */
    private void btnforadmindashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnforadmindashboardActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new AdminDashboard(this.menuList).setVisible(true);
    }//GEN-LAST:event_btnforadmindashboardActionPerformed

    /**
     * Handles the action when the "Search" button is clicked. Searches for menu
     * items by name and displays the results in a dialog.
     *
     * @param evt The event triggered by clicking the "Search" button.
     */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:

        clearTableData(tblforSearch);

        sortedMenuList = mergeSort.sort(menuList, 1, true);
        List<Integer> multiplevalue = binarySearch.searchByName(sortedMenuList, txtfldforSearch.getText());
        if (multiplevalue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "The name is not valid\nTry to enter another name", "No Data Found", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int i = 0; i < multiplevalue.size(); i++) {
                addModelToTable(sortedMenuList.get(multiplevalue.get(i)));
            }
            jDialogforTableSearch.setVisible(true);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * Clears all rows in the specified table.
     *
     * @param table The table to clear data from.
     */
    private void clearTableData(JTable table) {
        tableModel = (DefaultTableModel) tblforSearch.getModel();
        int size = tableModel.getRowCount() - 1;
        while (size >= 0) {
            tableModel.removeRow(size--);
        }
    }

    /**
     * Adds a menu item to the search result table.
     *
     * @param menu The menu item to add to the table.
     */
    private void addModelToTable(MenuItems menu) {
        tableModel = (DefaultTableModel) tblforSearch.getModel();
        tableModel.addRow(new Object[]{menu.getId(), menu.getName(), menu.getCategory(), menu.getPrice(),
            menu.getDescription(), menu.getCalories()});
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SortedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SortedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SortedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SortedItems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SortedItems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnforadd1;
    private javax.swing.JButton btnforadmindashboard;
    private javax.swing.JButton btnforuserdashboard;
    private javax.swing.JComboBox<String> jComboBoxforascendingdescending;
    private javax.swing.JComboBox<String> jComboBoxforsortbyidname;
    private javax.swing.JDialog jDialogforTableSearch;
    private javax.swing.JScrollPane jScrollPaneforSortedList;
    private javax.swing.JScrollPane jScrollPaneforSortedList1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblforSortbytxt;
    private javax.swing.JLabel lblforsettings;
    private javax.swing.JPanel pnlforMenubar;
    private javax.swing.JPanel pnlforallcomponentsofSort;
    private javax.swing.JTable tblforSearch;
    private javax.swing.JTable tblforSortedList;
    private javax.swing.JTextField txtfldforSearch;
    // End of variables declaration//GEN-END:variables
}
